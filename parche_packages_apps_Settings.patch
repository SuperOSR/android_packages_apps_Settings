project packages/apps/Settings/
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 14207db..1d6e3e3 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -360,6 +360,26 @@
                 android:value="com.android.settings.Settings$WirelessSettingsActivity" />
         </activity>
 
+        <activity android:name="Settings$EthernetSettingsActivity"
+                android:label="@string/eth_settings_title"
+				android:taskAffinity=""
+				android:excludeFromRecents="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <action android:name="android.settings.ETHERNET_SETTINGS" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.VOICE_LAUNCH" />
+                <category android:name="com.android.settings.SHORTCUT" />
+            </intent-filter>
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.ethernet.EthernetSettings" />
+            <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
+                android:resource="@id/wireless_settings" />
+            <meta-data android:name="com.android.settings.PARENT_FRAGMENT_TITLE"
+                android:resource="@string/wireless_networks_settings_title" />
+            <meta-data android:name="com.android.settings.PARENT_FRAGMENT_CLASS"
+                android:value="com.android.settings.Settings$WirelessSettingsActivity" />
+        </activity>
 
         <activity android:name="Settings$VpnSettingsActivity"
                 android:label="@string/vpn_settings_title"
@@ -1467,6 +1487,13 @@
             <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
                 android:resource="@id/wireless_settings" />
         </activity>
+        
+        <activity android:name="ScreenAdaption">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
 
         <activity android:name="Settings$DreamSettingsActivity"
                 android:label="@string/screensaver_settings_title"
diff --git a/res/values-de/arrays.xml b/res/values-de/arrays.xml
old mode 100644
new mode 100755
index 03d0143..d5d7ccd
--- a/res/values-de/arrays.xml
+++ b/res/values-de/arrays.xml
@@ -37,6 +37,7 @@
     <item msgid="7489864775127957179">"5 Minuten"</item>
     <item msgid="2314124409517439288">"10 Minuten"</item>
     <item msgid="6864027152847611413">"30 Minuten"</item>
+    <item>Never</item>
   </string-array>
   <string-array name="dream_timeout_entries">
     <item msgid="3149294732238283185">"Nie"</item>
diff --git a/res/values-de/strings.xml b/res/values-de/strings.xml
old mode 100644
new mode 100755
index f1ea62e..564586e
--- a/res/values-de/strings.xml
+++ b/res/values-de/strings.xml
@@ -255,7 +255,7 @@
     <string name="activity_picker_label" msgid="6295660302548177109">"Aktivität auswählen"</string>
     <string name="device_info_label" msgid="6551553813651711205">"Geräteinfo"</string>
     <string name="battery_info_label" msgid="4132685016148679403">"Akkuinfo"</string>
-    <string name="display_label" msgid="8074070940506840792">"Display"</string>
+    <string name="display_label" msgid="8074070940506840792">"Bildschirm"</string>
     <string name="phone_info_label" product="tablet" msgid="7820855350955963628">"Tablet-Informationen"</string>
     <string name="phone_info_label" product="default" msgid="2127552523124277664">"Über das Telefon"</string>
     <string name="sd_card_settings_label" product="nosdcard" msgid="8101475181301178428">"USB-Speicher"</string>
@@ -1831,4 +1831,7 @@
     <string name="user_picture_title" msgid="7297782792000291692">"Foto-ID"</string>
     <string name="cell_broadcast_settings" msgid="8415582011920085222">"Cell Broadcasts"</string>
     <string name="cell_broadcast_settings_summary" msgid="3301339398950905913">"Wählen Sie aus, welche Notfallbenachrichtigungen angezeigt werden sollen."</string>
+    <string name="never_sleep">Never sleep</string>
+	<string name="bright_system">Helligkeitssystem</string>
+	<string name="brightness_light">"Hintergrundbeleuchtung"</string>
 </resources>
diff --git a/res/values-es/arrays.xml b/res/values-es/arrays.xml
index 564f631..7d4f679 100644
--- a/res/values-es/arrays.xml
+++ b/res/values-es/arrays.xml
@@ -37,6 +37,7 @@
     <item msgid="7489864775127957179">"5 minutos"</item>
     <item msgid="2314124409517439288">"10 minutos"</item>
     <item msgid="6864027152847611413">"30 minutos"</item>
+    <item>Nunca</item>
   </string-array>
   <string-array name="dream_timeout_entries">
     <item msgid="3149294732238283185">"Nunca"</item>
diff --git a/res/values-fr/arrays.xml b/res/values-fr/arrays.xml
old mode 100644
new mode 100755
index 0e963b3..d8c6bcc
--- a/res/values-fr/arrays.xml
+++ b/res/values-fr/arrays.xml
@@ -37,6 +37,7 @@
     <item msgid="7489864775127957179">"5 minutes"</item>
     <item msgid="2314124409517439288">"10 minutes"</item>
     <item msgid="6864027152847611413">"30 minutes"</item>
+    <item msgid="6864027152847611414">"Pas de repos"</item>
   </string-array>
   <string-array name="dream_timeout_entries">
     <item msgid="3149294732238283185">"Jamais"</item>
diff --git a/res/values-fr/strings.xml b/res/values-fr/strings.xml
old mode 100644
new mode 100755
index f2ee1b1..658bfba
--- a/res/values-fr/strings.xml
+++ b/res/values-fr/strings.xml
@@ -1832,4 +1832,5 @@
     <string name="user_picture_title" msgid="7297782792000291692">"ID de photo"</string>
     <string name="cell_broadcast_settings" msgid="8415582011920085222">"Diffusions cellulaires"</string>
     <string name="cell_broadcast_settings_summary" msgid="3301339398950905913">"Sélectionnez les types d\'alertes d\'urgence à afficher."</string>
+    <string name="never_sleep">Pas de repos</string>
 </resources>
diff --git a/res/values-ja/strings.xml b/res/values-ja/strings.xml
old mode 100644
new mode 100755
index e54f496..dbb560f
--- a/res/values-ja/strings.xml
+++ b/res/values-ja/strings.xml
@@ -769,6 +769,8 @@
     <string name="kernel_version" msgid="9192574954196167602">"カーネルバージョン"</string>
     <string name="build_number" msgid="3075795840572241758">"ビルド番号"</string>
     <string name="selinux_status" msgid="6212165375172061672">"SELinuxのステータス"</string>
+    <string name="cpu_type" msgid="6793279B8D03BCB4124">"プロセッサ"</string>
+    <string name="software_version" msgid="1723274B8503B6B7134">ソフトウェアのバージョン"</string>
     <string name="device_info_not_available" msgid="8062521887156825182">"該当なし"</string>
     <string name="device_status_activity_title" msgid="1411201799384697904">"端末の状態"</string>
     <string name="device_status" msgid="607405385799807324">"端末の状態"</string>
diff --git a/res/values-zh-rCN/arrays.xml b/res/values-zh-rCN/arrays.xml
old mode 100644
new mode 100755
index 3d38157..8e52a87
--- a/res/values-zh-rCN/arrays.xml
+++ b/res/values-zh-rCN/arrays.xml
@@ -37,6 +37,7 @@
     <item msgid="7489864775127957179">"5 分钟"</item>
     <item msgid="2314124409517439288">"10 分钟"</item>
     <item msgid="6864027152847611413">"30 分钟"</item>
+    <item msgid="6864027152847611414">"从不休眠"</item>
   </string-array>
   <string-array name="dream_timeout_entries">
     <item msgid="3149294732238283185">"永不"</item>
diff --git a/res/values-zh-rCN/strings.xml b/res/values-zh-rCN/strings.xml
old mode 100644
new mode 100755
index 4478f15..ba265be
--- a/res/values-zh-rCN/strings.xml
+++ b/res/values-zh-rCN/strings.xml
@@ -767,6 +767,8 @@
     <string name="kernel_version" msgid="9192574954196167602">"内核版本"</string>
     <string name="build_number" msgid="3075795840572241758">"版本号"</string>
     <string name="selinux_status" msgid="6212165375172061672">"SELinux 状态"</string>
+    <string name="cpu_type" msgid="410C2A9B00B122B8310">"处理器"</string>
+    <string name="software_version" msgid="610C2A9B00B12356310">"固件版本号"</string>
     <string name="device_info_not_available" msgid="8062521887156825182">"不可用"</string>
     <string name="device_status_activity_title" msgid="1411201799384697904">"状态信息"</string>
     <string name="device_status" msgid="607405385799807324">"状态信息"</string>
@@ -783,7 +785,7 @@
     <string name="status_prl_version" msgid="1007470446618081441">"PRL 版本"</string>
     <string name="status_meid_number" msgid="1751442889111731088">"MEID"</string>
     <string name="status_icc_id" msgid="943368755577172747">"ICCID"</string>
-    <string name="status_network_type" msgid="3279383550222116235">"手机网络类型"</string>
+    <string name="status_network_type" msgid="3279383550222116235">"移动网络类型"</string>
     <string name="status_latest_area_info" msgid="7222470836568238054">"运营商信息"</string>
     <string name="status_data_state" msgid="5503181397066522950">"移动网络状态"</string>
     <string name="status_service_state" msgid="2323931627519429503">"服务状态"</string>
@@ -1501,6 +1503,10 @@
     <string name="privacy_settings_title" msgid="4856282165773594890">"备份和重置"</string>
     <string name="backup_section_title" msgid="7952232291452882740">"备份和还原"</string>
     <string name="personal_data_section_title" msgid="7815209034443782061">"个人数据"</string>
+    <string name="system_update_section_title" msgid="7815209034443782061">"系统升级"</string>
+    <string name="system_recovery_title" msgid="7815209034443782061">"Recovery模式"</string>
+    <string name="system_recovery_summary" msgid="7815209034443782061">"重启进入系统Recovery模式,可以清除分区数据或系统升级"</string>
+    <string name="system_recovery_dialog_massage" msgid="7815209034443782061">"立即重启进入系统Recovery模式,可以清除分区数据或系统升级？"</string>
     <string name="backup_data_title" msgid="1239105919852668016">"备份我的数据"</string>
     <string name="backup_data_summary" msgid="9157861529438245957">"将应用数据、Wi-Fi 密码和其他设置备份到 Google 服务器"</string>
     <string name="backup_configure_account_title" msgid="3790872965773196615">"备份帐户"</string>
@@ -1830,4 +1836,49 @@
     <string name="user_picture_title" msgid="7297782792000291692">"照片 ID"</string>
     <string name="cell_broadcast_settings" msgid="8415582011920085222">"小区广播"</string>
     <string name="cell_broadcast_settings_summary" msgid="3301339398950905913">"请选择要显示的紧急消息类型。"</string>
+
+    <string name="eth_settings_title">以太网</string>
+    <string name="eth_toggle_title">使用以太网</string>
+    <string name="eth_settings">以太网设置</string>
+    <string name="eth_devices">以太网设备</string>
+    <string name="eth_conf">以太网配置</string>
+    <string name="eth_ip_address">IP地址</string>
+    <string name="eth_ip_string">0.0.0.0</string>
+    <string name="eth_mac_address">物理地址</string>
+    <string name="eth_mac_string">00:00:00:00:00:00</string>
+    <string name="eth_advanced_configure">高级配置</string>
+    <string name="eth_mask_address">子网掩码</string>
+    <string name="eth_dns_address">DNS服务器</string>
+    <string name="eth_gw_address">默认网关</string>
+    <string name="eth_dhcp_choice">动态分配</string>
+    <string name="eth_dev_more">没有可用设备</string>
+    <string name="eth_dev_summaryoff">未连接</string>
+    <string name="eth_dev_summaryon">已连接 -- 使用设备: </string>
+    <string name="eth_link_status">Link Status</string>
+    <string name="eth_link_mode">Link Mode</string>
+    <string name="eth_ip_mode">IP模式: </string>
+    <string name="eth_dhcp_mode">动态</string>
+    <string name="eth_manual_mode">静态</string>
+    <string name="eth_ok">确定</string>
+    <string name="eth_cancel">取消</string>
+    <string name="eth_advand">高级</string>
+    <string name="eth_message">确定应用此配置到设备?</string>
+	
+	<string name="boot_fast_mode">快速启动</string>
+	<string name="cpu_fast_mode">极速模式</string>
+
+    <string name="bright_system">丽色系统</string>
+    <string name="bright_system_summary">丽色系统用于玩游戏,观看视频图片,效果更佳</string>
+    <string name="brightness_light">智能背光</string>
+    <string name="demo_mode">演示模式</string>
+    <string name="demo_mode_summary">只对半个屏幕有效,便于看出效果</string>
+    <string name="bright_system_on">启动丽色系统</string>
+    <string name="brightness_light_on">启动智能背光</string>
+
+    <string name="hdmi_setting">HDMI设置</string>
+    <string name="hdmi_output_mode">HDMI输出模式</string>
+    <string name="hdmi_output_mode_summary">设置默认的HDMI输出制式</string>
+    
+    <string name="never_sleep">从不休眠</string>
+
 </resources>
diff --git a/res/values-zh-rTW/arrays.xml b/res/values-zh-rTW/arrays.xml
old mode 100644
new mode 100755
index 8fb20b6..12a1c06
--- a/res/values-zh-rTW/arrays.xml
+++ b/res/values-zh-rTW/arrays.xml
@@ -37,6 +37,7 @@
     <item msgid="7489864775127957179">"5 分鐘"</item>
     <item msgid="2314124409517439288">"10 分鐘"</item>
     <item msgid="6864027152847611413">"30 分鐘"</item>
+    <item msgid="6864027152847611414">"從不休眠"</item>
   </string-array>
   <string-array name="dream_timeout_entries">
     <item msgid="3149294732238283185">"永不"</item>
diff --git a/res/values-zh-rTW/strings.xml b/res/values-zh-rTW/strings.xml
old mode 100644
new mode 100755
index cec4e1d..0293fbf
--- a/res/values-zh-rTW/strings.xml
+++ b/res/values-zh-rTW/strings.xml
@@ -766,6 +766,8 @@
     <string name="baseband_version" msgid="1848990160763524801">"基頻版本"</string>
     <string name="kernel_version" msgid="9192574954196167602">"核心版本"</string>
     <string name="build_number" msgid="3075795840572241758">"版本號碼"</string>
+    <string name="cpu_type" msgid="507679567812241348">"處理器"</string>
+    <string name="software_version" msgid="415374954196167201">軟件版本</string>
     <string name="selinux_status" msgid="6212165375172061672">"SELinux 狀態"</string>
     <string name="device_info_not_available" msgid="8062521887156825182">"無法取得"</string>
     <string name="device_status_activity_title" msgid="1411201799384697904">"狀態"</string>
@@ -1505,6 +1507,10 @@
     <string name="privacy_settings_title" msgid="4856282165773594890">"備份與重設"</string>
     <string name="backup_section_title" msgid="7952232291452882740">"備份與還原"</string>
     <string name="personal_data_section_title" msgid="7815209034443782061">"個人資料"</string>
+    <string name="system_update_section_title" msgid="7815209034443782061">"系統升級"</string>
+    <string name="system_recovery_title" msgid="7815209034443782061">"Recovery模式"</string>
+    <string name="system_recovery_summary" msgid="7815209034443782061">"重啟進入系統Recovery模式,可以清除分區數據或系統升級"</string>
+    <string name="system_recovery_dialog_massage" msgid="7815209034443782061">"立即重啟進入系統Recovery模式,可以清除分區數據或系統升級？"</string>
     <string name="backup_data_title" msgid="1239105919852668016">"備份我的資料"</string>
     <string name="backup_data_summary" msgid="9157861529438245957">"將應用程式資料、Wi-Fi 密碼，以及其他設定備份到 Google 伺服器"</string>
     <string name="backup_configure_account_title" msgid="3790872965773196615">"備份帳戶"</string>
@@ -1834,4 +1840,47 @@
     <string name="user_picture_title" msgid="7297782792000291692">"相片 ID"</string>
     <string name="cell_broadcast_settings" msgid="8415582011920085222">"區域廣播"</string>
     <string name="cell_broadcast_settings_summary" msgid="3301339398950905913">"選取要顯示的緊急警示類型。"</string>
+    <string name="eth_settings_title">以太網</string>
+    <string name="eth_toggle_title">使用以太網</string>
+    <string name="eth_settings">以太網設置</string>
+    <string name="eth_devices">以太網設備</string>
+    <string name="eth_conf">以太網配置</string>
+    <string name="eth_ip_address">IP地址</string>
+    <string name="eth_ip_string">0.0.0.0</string>
+    <string name="eth_mac_address">物理地址</string>
+    <string name="eth_mac_string">00:00:00:00:00:00</string>
+    <string name="eth_advanced_configure">高級配置</string>
+    <string name="eth_mask_address">子網掩碼</string>
+    <string name="eth_dns_address">DNS服務器</string>
+    <string name="eth_gw_address">默認網關</string>
+    <string name="eth_dhcp_choice">動態分配</string>
+    <string name="eth_dev_more">沒有可用設備</string>
+    <string name="eth_dev_summaryoff">未連接</string>
+    <string name="eth_dev_summaryon">已連接 -- 使用設備: </string>
+    <string name="eth_link_status">Link Status</string>
+    <string name="eth_link_mode">Link Mode</string>
+    <string name="eth_ip_mode">IP模式: </string>
+    <string name="eth_dhcp_mode">動態</string>
+    <string name="eth_manual_mode">靜態</string>
+    <string name="eth_ok">確定</string>
+    <string name="eth_cancel">取消</string>
+    <string name="eth_advand">高級</string>
+    <string name="eth_message">確定應用此配置到設備?</string>
+	
+	<string name="boot_fast_mode">快速啟動</string>
+	<string name="cpu_fast_mode">極速模式</string>
+
+    <string name="bright_system">麗色系統</string>
+    <string name="bright_system_summary">麗色系統用於玩遊戲，觀看視頻圖片，效果更佳</string>
+    <string name="brightness_light">智能背光</string>
+    <string name="demo_mode">演示模式</string>
+    <string name="demo_mode_summary">只對半個屏幕有效，便於看出效果</string>
+    <string name="bright_system_on">啟動麗色系統</string>
+    <string name="brightness_light_on">啟動智能背光</string>
+
+    <string name="hdmi_setting">HDMI設置</string>
+    <string name="hdmi_output_mode">HDMI輸出模式</string>
+    <string name="hdmi_output_mode_summary">設置默認的HDMI輸出制式</string>
+    
+    <string name="never_sleep">從不休眠</string>
 </resources>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 14e1fc8..1ab6165 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -57,6 +57,7 @@
         <item>5 minutes</item>
         <item>10 minutes</item>
         <item>30 minutes</item>
+        <item>Never</item>
     </string-array>
 
     <!-- Do not translate. -->
@@ -75,6 +76,8 @@
         <item>600000</item>
         <!-- Do not translate. -->
         <item>1800000</item>
+        <!-- Do not translate. -->
+        <item>1728000000</item>
     </string-array>
     
     <!-- Display settings.  The delay in inactivity before the dream is shown. These are shown in a list dialog. -->
diff --git a/res/values/strings.xml b/res/values/strings.xml
index b5c04b0..b67aad7 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1874,6 +1874,10 @@
     <!-- About phone screen,  setting option name-->
     <string name="build_number">Build number</string>
     <!-- About phone screen,  setting option name-->
+    <string name="cpu_type">Processor</string>
+    <!-- About phone screen,  setting option name-->
+    <string name="software_version">Firmware version</string>
+    <!-- About phone screen,  setting option name-->
     <string name="selinux_status">SELinux status</string>
 
     <!-- About phone screen, show when a value of some status item is unavailable. -->
@@ -2900,7 +2904,7 @@
     <!-- User dictionary settings. The list item to choose to insert a word into the user dictionary for all languages -->
     <string name="user_dict_settings_all_languages">For all languages</string>
     <!-- User dictionary settings. The text to show for the option that shows the entire list of supported locales to choose one [CHAR LIMIT=30] -->
-    <string name="user_dict_settings_more_languages">More languages…</string>
+    <string name="user_dict_settings_more_languages">More languages...</string>
 
     <!-- This is for diagnostics screen. The title of a screen with various items realted to launching screens that will giev the user info. For example, it contains "Phone information" and "Battery information" -->
     <string name="testing">Testing</string>
@@ -3551,6 +3555,11 @@
     <string name="backup_section_title">Backup &amp; restore</string>
     <!-- Personal data section title -->
     <string name="personal_data_section_title">Personal data</string>
+    <!-- system update  -->
+    <string name="system_update_section_title" msgid="7815209034443782061">"System upgrade"</string>
+    <string name="system_recovery_title" msgid="7815209034443782061">"Recovery Mode"</string>
+    <string name="system_recovery_summary" msgid="7815209034443782061">"Reboot into the system in Recovery Mode.Can clear the data or system upgrade"</string>
+    <string name="system_recovery_dialog_massage" msgid="7815209034443782061">"Now reboot into System Recovery Mode, you can partition to remove data or system upgrade?"</string>
     <!-- Backup data menu title -->
     <string name="backup_data_title">Back up my data</string>
     <!-- Summary text of the "back up data" setting -->
@@ -4380,4 +4389,52 @@
     <string name="cell_broadcast_settings">Cell broadcasts</string>
     <!-- Cell Broadcast settings description [CHAR LIMIT=100] -->
     <string name="cell_broadcast_settings_summary">Select the types of emergency alerts to display.</string>
+
+    <!-- Ethernet Settings settings title [CHAR LIMIT=20] -->
+    <string name="eth_settings_title">Ethernet</string>
+    <string name="eth_toggle_title">Use Ethernet</string>
+    <string name="eth_settings">Ethernet Settings</string>
+    <string name="eth_devices">Ethernet Devices</string>
+    <string name="eth_conf">Ethernet Configure</string>
+    <string name="eth_ip_address">IP Address</string>
+    <string name="eth_ip_string">0.0.0.0</string>
+    <string name="eth_mac_address">MAC Address</string>
+    <string name="eth_mac_string">00:00:00:00:00:00</string>
+    <string name="eth_advanced_configure">Advanced Configure</string>
+    <string name="eth_mask_address">Mask Address</string>
+    <string name="eth_dns_address">DNS Server</string>
+    <string name="eth_gw_address">GateWay</string>
+    <string name="eth_dhcp_choice">DHCP</string>
+    <string name="eth_dev_more">None Device</string>
+    <string name="eth_dev_summaryoff">DISCONNECTED</string>
+    <string name="eth_dev_summaryon">CONNECTED -- USED DEVICE: </string>
+    <string name="eth_link_status">Link Status</string>
+    <string name="eth_link_mode">Link Mode</string>
+    <string name="eth_ip_mode">IP Mode: </string>
+    <string name="eth_dhcp_mode">DHCP</string>
+    <string name="eth_manual_mode">MANUAL</string>
+    <string name="eth_ok">Ok</string>
+    <string name="eth_cancel">Cancel</string>
+    <string name="eth_advand">Advand</string>
+    <string name="eth_message">Are you apply this device?</string>
+	
+	<string name="boot_fast_mode">Quick boot mode</string>
+	<string name="cpu_fast_mode">High speed mode</string>
+
+    <string name="bright_system">smart color</string>
+    <string name="bright_system_summary">It is better for playing games and video and picture </string>
+    <string name="brightness_light">intelligent backlight</string>
+    <string name="demo_mode">Demo mode</string>
+    <string name="demo_mode_summary">Only half of the screen is an effective, easy to see the effect of it</string>
+    <string name="bright_system_on">startup Bright System</string>
+    <string name="brightness_light_on">startup brightness backlight</string>
+
+    <string name="hdmi_setting">hdmi setting</string>
+    <string name="hdmi_output_mode">hdmi output mode</string>
+    <string name="hdmi_output_mode_summary">Set the default HDMI output standard</string>
+    
+    <string name="never_sleep">Never</string>
+    <string name="hdmi_full_screen">hdmi full screen mode</string>
+    <string name="hdmi_full_screen_summary">Set true to show HDMI in full screen mode.</string>
+
 </resources>
diff --git a/res/xml/accessibility_settings.xml b/res/xml/accessibility_settings.xml
index 15b5b2e..d685cab 100644
--- a/res/xml/accessibility_settings.xml
+++ b/res/xml/accessibility_settings.xml
@@ -41,11 +41,13 @@
                 android:key="toggle_power_button_ends_call_preference"
                 android:title="@string/accessibility_power_button_ends_call_prerefence_title"
                 android:persistent="false"/>
-
+				
+				<!--
         <CheckBoxPreference
                 android:key="toggle_lock_screen_rotation_preference"
                 android:title="@string/accelerometer_title"
                 android:persistent="false"/>
+        -->        
 
         <CheckBoxPreference
                 android:key="toggle_speak_password_preference"
@@ -77,6 +79,16 @@
                 android:positiveButtonText="@string/accessibility_script_injection_button_allow"
                 android:negativeButtonText="@string/accessibility_script_injection_button_disallow"
                 android:persistent="false"/>
+		
+		<CheckBoxPreference
+                android:key="boot_fast_enable"
+                android:title="@string/boot_fast_mode"
+                android:persistent="false"/>
+				
+		<CheckBoxPreference
+				android:key="cpu_fast_mode"
+				android:title="@string/cpu_fast_mode"
+				android:persistent="false"/>
 
     </PreferenceCategory>
 
diff --git a/res/xml/device_info_settings.xml b/res/xml/device_info_settings.xml
index 03f1e78..5eef813 100644
--- a/res/xml/device_info_settings.xml
+++ b/res/xml/device_info_settings.xml
@@ -92,6 +92,12 @@
         <com.android.settings.RegulatoryInfoPreference android:key="regulatory_info"
                 android:title="@string/regulatory_information" />
 
+        <!-- CPU type -->
+        <Preference android:key="cpu_type"
+                style="?android:preferenceInformationStyle"
+                android:title="@string/cpu_type"
+                android:summary="@string/device_info_default"/>
+                
         <!-- Device hardware model -->
         <Preference android:key="device_model" 
                 style="?android:preferenceInformationStyle"
@@ -109,6 +115,12 @@
                 style="?android:preferenceInformationStyle"
                 android:title="@string/fcc_equipment_id"
                 android:summary="@string/device_info_default"/>
+        
+        <!-- Device software version -->
+        <Preference android:key="software_version"
+                style="?android:preferenceInformationStyle"
+                android:title="@string/software_version"
+                android:summary="@string/device_info_default"/>
 
         <!-- Device Baseband version -->
         <Preference android:key="baseband_version" 
diff --git a/res/xml/display_settings.xml b/res/xml/display_settings.xml
index d14446c..31c2a32 100644
--- a/res/xml/display_settings.xml
+++ b/res/xml/display_settings.xml
@@ -57,10 +57,59 @@
             android:key="notification_pulse"
             android:title="@string/notification_pulse_title"
             android:persistent="false" />
+        <ListPreference
+            android:key="accelerometer_coornadite"
+            android:title="@string/accelerometer_coordinate_title"
+            android:persistent="false"
+            android:entries="@array/accelerometer_entries"
+            android:entryValues="@array/accelerometer_values" />
+
+        <PreferenceScreen
+            android:title="@string/screen_adaption_setting"
+            android:summary="@string/screen_adaption_summary">
+            <intent
+                android:action="android.intent.action.MAIN"
+                android:targetPackage="com.android.settings"
+                android:targetClass="com.android.settings.ScreenAdaption" />
+        </PreferenceScreen>
 
         <PreferenceScreen
                 android:key="wifi_display"
                 android:title="@string/wifi_display_settings_title"
                 android:fragment="com.android.settings.wfd.WifiDisplaySettings" />
 
+    <PreferenceCategory
+        android:title="@string/hdmi_setting"
+        android:key="hdmi_output_mode_cate">
+        <ListPreference
+            android:key="hdmi_output_mode"
+            android:title="@string/hdmi_output_mode"
+            android:summary="@string/hdmi_output_mode_summary"
+            android:persistent="false"
+            android:entries="@array/hdmi_output_mode_entries"
+            android:entryValues="@array/hdmi_output_mode_values" />
+    </PreferenceCategory>
+
+    <PreferenceCategory android:title="@string/bright_system" />
+
+    <CheckBoxPreference
+        android:key="bright_system"
+        android:summary="@string/bright_system_summary"
+        android:title="@string/bright_system" />
+    <CheckBoxPreference
+        android:key="bright_demo_mode"
+        android:summary="@string/demo_mode_summary"
+        android:title="@string/demo_mode" />
+
+    <PreferenceCategory android:title="@string/brightness_light" />
+
+    <CheckBoxPreference
+        android:key="brightness_light"
+        android:persistent="false"
+        android:title="@string/brightness_light" />
+    <CheckBoxPreference
+        android:key="backlight_demo_mode"
+        android:summary="@string/demo_mode_summary"
+        android:title="@string/demo_mode" />
+
 </PreferenceScreen>
diff --git a/res/xml/language_settings.xml b/res/xml/language_settings.xml
index f001486..b994310 100644
--- a/res/xml/language_settings.xml
+++ b/res/xml/language_settings.xml
@@ -80,9 +80,9 @@
         <PreferenceScreen android:key="recognizer_settings"
                 android:title="@string/recognizer_settings_title" />
 
-        <PreferenceScreen android:key="tts_settings"
+        <!--<PreferenceScreen android:key="tts_settings"
                 android:fragment="com.android.settings.tts.TextToSpeechSettings"
-                android:title="@string/tts_settings_title" />
+                android:title="@string/tts_settings_title" />-->
     </PreferenceCategory>
 
     <PreferenceCategory android:key="pointer_settings_category"
diff --git a/res/xml/privacy_settings.xml b/res/xml/privacy_settings.xml
index 57ad514..cc13e49 100644
--- a/res/xml/privacy_settings.xml
+++ b/res/xml/privacy_settings.xml
@@ -47,5 +47,14 @@
         android:title="@string/master_clear_title"
         android:summary="@string/master_clear_summary"
         android:fragment="com.android.settings.MasterClear" />
-
+<!--
+    <PreferenceCategory
+            android:title="@string/system_update_section_title"/>
+ 
+    <PreferenceScreen
+        android:key="system_recovery"
+        android:title="@string/system_recovery_title"
+        android:summary="@string/system_recovery_summary"
+         />
+-->
 </PreferenceScreen>
diff --git a/res/xml/usb_settings.xml b/res/xml/usb_settings.xml
index 4d6ccc9..ea4334e 100644
--- a/res/xml/usb_settings.xml
+++ b/res/xml/usb_settings.xml
@@ -31,5 +31,8 @@
         android:title="@string/usb_ptp_title"
         android:summary="@string/usb_ptp_summary"
         />
+    <CheckBoxPreference 
+        android:title="@string/usb_storage_usage" 
+        android:key="usb_large_storage"/>
 
 </PreferenceScreen>
diff --git a/res/xml/wireless_settings.xml b/res/xml/wireless_settings.xml
index 3cd72b3..3a6bb3e 100644
--- a/res/xml/wireless_settings.xml
+++ b/res/xml/wireless_settings.xml
@@ -24,6 +24,11 @@
         android:disableDependentsState="true" />
 
     <PreferenceScreen
+        android:fragment="com.android.settings.ethernet.EthernetSettings"
+        android:key="ethernet_settings"
+        android:title="@string/eth_settings_title" />
+
+    <PreferenceScreen
         android:fragment="com.android.settings.vpn2.VpnSettings"
         android:key="vpn_settings"
         android:title="@string/vpn_settings_title" />
diff --git a/src/com/android/settings/AccessibilitySettings.java b/src/com/android/settings/AccessibilitySettings.java
index b6556a9..a7f3e8c 100644
--- a/src/com/android/settings/AccessibilitySettings.java
+++ b/src/com/android/settings/AccessibilitySettings.java
@@ -59,6 +59,7 @@ import android.view.accessibility.AccessibilityManager;
 import android.widget.LinearLayout;
 import android.widget.Switch;
 import android.widget.TextView;
+import android.util.Log;
 
 import com.android.internal.content.PackageMonitor;
 import com.android.internal.view.RotationPolicy;
@@ -102,8 +103,8 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
             "toggle_large_text_preference";
     private static final String TOGGLE_POWER_BUTTON_ENDS_CALL_PREFERENCE =
             "toggle_power_button_ends_call_preference";
-    private static final String TOGGLE_LOCK_SCREEN_ROTATION_PREFERENCE =
-            "toggle_lock_screen_rotation_preference";
+//    private static final String TOGGLE_LOCK_SCREEN_ROTATION_PREFERENCE =
+//            "toggle_lock_screen_rotation_preference";
     private static final String TOGGLE_SPEAK_PASSWORD_PREFERENCE =
             "toggle_speak_password_preference";
     private static final String SELECT_LONG_PRESS_TIMEOUT_PREFERENCE =
@@ -114,6 +115,9 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
             "enable_global_gesture_preference_screen";
     private static final String DISPLAY_MAGNIFICATION_PREFERENCE_SCREEN =
             "screen_magnification_preference_screen";
+	private static final String KEY_BOOT_FAST_ENABLE = "boot_fast_enable";
+
+	private static final String KEY_CPU_FAST_MODE = "cpu_fast_mode";
 
     // Extras passed to sub-fragments.
     private static final String EXTRA_PREFERENCE_KEY = "preference_key";
@@ -176,8 +180,10 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
 
     private CheckBoxPreference mToggleLargeTextPreference;
     private CheckBoxPreference mTogglePowerButtonEndsCallPreference;
-    private CheckBoxPreference mToggleLockScreenRotationPreference;
+    //private CheckBoxPreference mToggleLockScreenRotationPreference;
     private CheckBoxPreference mToggleSpeakPasswordPreference;
+	private CheckBoxPreference mBootFastEnablePreference;
+	private CheckBoxPreference mCpuFastEnablePreference;
     private ListPreference mSelectLongPressTimeoutPreference;
     private AccessibilityEnableScriptInjectionPreference mToggleScriptInjectionPreference;
     private Preference mNoServicesMessagePreference;
@@ -236,9 +242,9 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
         } else if (mTogglePowerButtonEndsCallPreference == preference) {
             handleTogglePowerButtonEndsCallPreferenceClick();
             return true;
-        } else if (mToggleLockScreenRotationPreference == preference) {
+        /*} else if (mToggleLockScreenRotationPreference == preference) {
             handleLockScreenRotationPreferenceClick();
-            return true;
+            return true;*/
         } else if (mToggleSpeakPasswordPreference == preference) {
             handleToggleSpeakPasswordPreferenceClick();
             return true;
@@ -248,6 +254,10 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
         } else if (mDisplayMagnificationPreferenceScreen == preference) {
             handleDisplayMagnificationPreferenceScreenClick();
             return true;
+        }else if(mBootFastEnablePreference!=null&&mBootFastEnablePreference == preference){
+        	handleBootFastEnablePreferenceScreenClick();
+        }else if(mCpuFastEnablePreference!=null&&mCpuFastEnablePreference == preference){
+        	handleCpuFastModeEnablePreferenceScreenClick();
         }
         return super.onPreferenceTreeClick(preferenceScreen, preference);
     }
@@ -270,8 +280,8 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
     }
 
     private void handleLockScreenRotationPreferenceClick() {
-        RotationPolicy.setRotationLockForAccessibility(getActivity(),
-                !mToggleLockScreenRotationPreference.isChecked());
+        //RotationPolicy.setRotationLockForAccessibility(getActivity(),
+                //!mToggleLockScreenRotationPreference.isChecked());
     }
 
     private void handleToggleSpeakPasswordPreferenceClick() {
@@ -304,6 +314,18 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
                 mDisplayMagnificationPreferenceScreen);
     }
 
+	private void handleBootFastEnablePreferenceScreenClick(){
+		Settings.System.putInt(getContentResolver(),
+                Settings.System.BOOT_FAST_ENABLE,
+                mBootFastEnablePreference.isChecked() ? 1 : 0);
+	}
+
+	private void handleCpuFastModeEnablePreferenceScreenClick(){
+		Settings.System.putInt(getContentResolver(),
+                Settings.System.CPU_FAST_ENABLE,
+                mCpuFastEnablePreference.isChecked() ? 1 : 0);
+	}
+	
     private void initializeAllPreferences() {
         mServicesCategory = (PreferenceCategory) findPreference(SERVICES_CATEGORY);
         mSystemsCategory = (PreferenceCategory) findPreference(SYSTEM_CATEGORY);
@@ -321,8 +343,8 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
         }
 
         // Lock screen rotation.
-        mToggleLockScreenRotationPreference =
-                (CheckBoxPreference) findPreference(TOGGLE_LOCK_SCREEN_ROTATION_PREFERENCE);
+        //mToggleLockScreenRotationPreference =
+        //        (CheckBoxPreference) findPreference(TOGGLE_LOCK_SCREEN_ROTATION_PREFERENCE);
 
         // Speak passwords.
         mToggleSpeakPasswordPreference =
@@ -355,6 +377,17 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
         // Global gesture.
         mGlobalGesturePreferenceScreen =
                 (PreferenceScreen) findPreference(ENABLE_ACCESSIBILITY_GESTURE_PREFERENCE_SCREEN);
+
+		mBootFastEnablePreference = (CheckBoxPreference)findPreference(KEY_BOOT_FAST_ENABLE);
+		if(!SystemProperties.getBoolean("ro.sys.bootfast",false)){
+			mSystemsCategory.removePreference(mBootFastEnablePreference);
+			mBootFastEnablePreference = null;
+		}
+
+		mCpuFastEnablePreference= (CheckBoxPreference)findPreference(KEY_CPU_FAST_MODE);
+		
+		//buy hua remove CPU_FAST_MODE
+		mSystemsCategory.removePreference(mCpuFastEnablePreference);
     }
 
     private void updateAllPreferences() {
@@ -530,13 +563,27 @@ public class AccessibilitySettings extends SettingsPreferenceFragment implements
             mGlobalGesturePreferenceScreen.setSummary(
                     R.string.accessibility_global_gesture_preference_summary_off);
         }
+
+		final boolean bootFastEnable = Settings.System.getInt(getContentResolver(),
+                Settings.System.BOOT_FAST_ENABLE, 0)==1?true:false;
+		if(mBootFastEnablePreference!=null){
+			mBootFastEnablePreference.setChecked(bootFastEnable);
+		}
+
+		final boolean cpuFastEnable = Settings.System.getInt(getContentResolver(),
+                Settings.System.CPU_FAST_ENABLE, 0)==1?true:false;
+		if(mBootFastEnablePreference!=null){
+			mCpuFastEnablePreference.setChecked(cpuFastEnable);
+		}
+		
+		
     }
 
     private void updateLockScreenRotationCheckbox() {
         Context context = getActivity();
         if (context != null) {
-            mToggleLockScreenRotationPreference.setChecked(
-                    !RotationPolicy.isRotationLocked(context));
+            //mToggleLockScreenRotationPreference.setChecked(
+            //        !RotationPolicy.isRotationLocked(context));
         }
     }
 
diff --git a/src/com/android/settings/BrightnessPreference.java b/src/com/android/settings/BrightnessPreference.java
index 2cf6b43..78f5166 100644
--- a/src/com/android/settings/BrightnessPreference.java
+++ b/src/com/android/settings/BrightnessPreference.java
@@ -46,7 +46,7 @@ public class BrightnessPreference extends SeekBarDialogPreference implements
     private final int mScreenBrightnessMaximum;
 
     private SeekBar mSeekBar;
-    private CheckBox mCheckBox;
+    //private CheckBox mCheckBox;
 
     private int mOldBrightness;
     private int mOldAutomatic;
@@ -112,16 +112,16 @@ public class BrightnessPreference extends SeekBarDialogPreference implements
         mOldBrightness = getBrightness();
         mSeekBar.setProgress(mOldBrightness);
 
-        mCheckBox = (CheckBox)view.findViewById(R.id.automatic_mode);
+        /*mCheckBox = (CheckBox)view.findViewById(R.id.automatic_mode);
         if (mAutomaticAvailable) {
             mCheckBox.setOnCheckedChangeListener(this);
             mOldAutomatic = getBrightnessMode(0);
             mAutomaticMode = mOldAutomatic == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
             mCheckBox.setChecked(mAutomaticMode);
             mSeekBar.setEnabled(!mAutomaticMode || USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT);
-        } else {
+        } else {*/
             mSeekBar.setEnabled(true);
-        }
+        //}
         mSeekBar.setOnSeekBarChangeListener(this);
     }
 
@@ -184,7 +184,7 @@ public class BrightnessPreference extends SeekBarDialogPreference implements
     private void onBrightnessModeChanged() {
         boolean checked = getBrightnessMode(0)
                 == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
-        mCheckBox.setChecked(checked);
+        //mCheckBox.setChecked(checked);
         mSeekBar.setProgress(getBrightness());
         mSeekBar.setEnabled(!checked || USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT);
     }
@@ -269,7 +269,7 @@ public class BrightnessPreference extends SeekBarDialogPreference implements
 
         // Save the dialog state
         final SavedState myState = new SavedState(superState);
-        myState.automatic = mCheckBox.isChecked();
+        //myState.automatic = mCheckBox.isChecked();
         myState.progress = mSeekBar.getProgress();
         myState.oldAutomatic = mOldAutomatic == 1;
         myState.oldProgress = mOldBrightness;
diff --git a/src/com/android/settings/DateTimeSettings.java b/src/com/android/settings/DateTimeSettings.java
index 65a34f4..43def8d 100644
--- a/src/com/android/settings/DateTimeSettings.java
+++ b/src/com/android/settings/DateTimeSettings.java
@@ -95,7 +95,7 @@ public class DateTimeSettings extends SettingsPreferenceFragment
         mAutoTimeZonePref = (CheckBoxPreference) findPreference(KEY_AUTO_TIME_ZONE);
         // Override auto-timezone if it's a wifi-only device or if we're still in setup wizard.
         // TODO: Remove the wifiOnly test when auto-timezone is implemented based on wifi-location.
-        if (Utils.isWifiOnly(getActivity()) || isFirstRun) {
+        if (true/*Utils.isWifiOnly(getActivity()) || isFirstRun*/) {
             getPreferenceScreen().removePreference(mAutoTimeZonePref);
             autoTimeZoneEnabled = false;
         }
diff --git a/src/com/android/settings/DeviceInfoSettings.java b/src/com/android/settings/DeviceInfoSettings.java
index d2ff6db..7bbc866 100644
--- a/src/com/android/settings/DeviceInfoSettings.java
+++ b/src/com/android/settings/DeviceInfoSettings.java
@@ -60,9 +60,13 @@ public class DeviceInfoSettings extends SettingsPreferenceFragment {
     private static final String KEY_SELINUX_STATUS = "selinux_status";
     private static final String KEY_BASEBAND_VERSION = "baseband_version";
     private static final String KEY_FIRMWARE_VERSION = "firmware_version";
+    private static final String KEY_SOFTWARE_VERSION = "software_version";
     private static final String KEY_UPDATE_SETTING = "additional_system_update_settings";
     private static final String KEY_EQUIPMENT_ID = "fcc_equipment_id";
+    private static final String KEY_CPU_TYPE = "cpu_type";
     private static final String PROPERTY_EQUIPMENT_ID = "ro.ril.fccid";
+    private static final String PROPERTY_CPUTYPE = "ro.sys.cputype";
+    private static final String PROPETY_BASEBAND = "ro.sw.embeded.telephony";
 
     static final int TAPS_TO_BE_A_DEVELOPER = 7;
 
@@ -78,11 +82,17 @@ public class DeviceInfoSettings extends SettingsPreferenceFragment {
 
         setStringSummary(KEY_FIRMWARE_VERSION, Build.VERSION.RELEASE);
         findPreference(KEY_FIRMWARE_VERSION).setEnabled(true);
+	    setStringSummary(KEY_SOFTWARE_VERSION,Build.FIRMWARE);
+	 
         setValueSummary(KEY_BASEBAND_VERSION, "gsm.version.baseband");
+        if(!SystemProperties.getBoolean(PROPETY_BASEBAND,false)){
+	    	removePreference(KEY_BASEBAND_VERSION);
+	    }
         setStringSummary(KEY_DEVICE_MODEL, Build.MODEL + getMsvSuffix());
         setValueSummary(KEY_EQUIPMENT_ID, PROPERTY_EQUIPMENT_ID);
         setStringSummary(KEY_DEVICE_MODEL, Build.MODEL);
         setStringSummary(KEY_BUILD_NUMBER, Build.DISPLAY);
+        setStringSummary(KEY_CPU_TYPE,SystemProperties.get(PROPERTY_CPUTYPE,"UNKNOWN"));
         findPreference(KEY_BUILD_NUMBER).setEnabled(true);
         findPreference(KEY_KERNEL_VERSION).setSummary(getFormattedKernelVersion());
 
@@ -129,7 +139,7 @@ public class DeviceInfoSettings extends SettingsPreferenceFragment {
 
         // These are contained by the root preference screen
         parentPreference = getPreferenceScreen();
-        if (UserHandle.myUserId() == UserHandle.USER_OWNER) {
+        if (false) {//(UserHandle.myUserId() == UserHandle.USER_OWNER) {
             Utils.updatePreferenceToSpecificActivityOrRemove(act, parentPreference,
                     KEY_SYSTEM_UPDATE_SETTINGS,
                     Utils.UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY);
diff --git a/src/com/android/settings/DisplaySettings.java b/src/com/android/settings/DisplaySettings.java
index fb839a7..9f26d5b 100644
--- a/src/com/android/settings/DisplaySettings.java
+++ b/src/com/android/settings/DisplaySettings.java
@@ -48,6 +48,9 @@ import com.android.settings.DreamSettings;
 
 import java.util.ArrayList;
 
+import android.os.SystemProperties;
+import android.preference.PreferenceCategory;
+
 public class DisplaySettings extends SettingsPreferenceFragment implements
         Preference.OnPreferenceChangeListener, OnPreferenceClickListener {
     private static final String TAG = "DisplaySettings";
@@ -61,14 +64,30 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
     private static final String KEY_NOTIFICATION_PULSE = "notification_pulse";
     private static final String KEY_SCREEN_SAVER = "screensaver";
     private static final String KEY_WIFI_DISPLAY = "wifi_display";
-
+    private static final String KEY_ACCELEROMETER_COORDINATE = "accelerometer_coornadite";
+    private static final String KEY_SCREEN_ADAPTION = "screen_adaption";
     private static final int DLG_GLOBAL_CHANGE_WARNING = 1;
 
     private DisplayManager mDisplayManager;
 
+    private static final String KEY_BRIGHT_SYSTEM = "bright_system";
+    private static final String KEY_BRIGHT_SYSTEM_DEMO = "bright_demo_mode";
+    private static final String KEY_BRIGHTNESS_LIGHT = "brightness_light";
+    private static final String KEY_BRIGHTNESS_LIGHT_DEMO = "backlight_demo_mode";
+    private static final String KEY_HDMI_OUTPUT_MODE = "hdmi_output_mode";
+    private static final String KEY_HDMI_OUTPUT_MODE_720P = "hdmi_output_mode_720p";
+    private static final String KEY_HDMI_OUTPUT_MODE_CATE = "hdmi_output_mode_cate";
+    private static final String KEY_HDMI_FULL_SCREEN = "hdmi_full_screen";
     private CheckBoxPreference mAccelerometer;
     private WarnedListPreference mFontSizePref;
     private CheckBoxPreference mNotificationPulse;
+    private ListPreference mAccelerometerCoordinate;
+    private CheckBoxPreference mBrightSystem,mBrightSystemDemo;
+    private CheckBoxPreference mBrightnessLight,mBrightnessLightDemo;
+
+    private ListPreference mHdmiOutputModePreference;
+    private PreferenceCategory mHdmiOutputModeCategory;
+    private CheckBoxPreference mHdmiFullScreen;
 
     private final Configuration mCurConfig = new Configuration();
     
@@ -78,6 +97,7 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
     private WifiDisplayStatus mWifiDisplayStatus;
     private Preference mWifiDisplayPreference;
 
+    private Preference mScreenAdaption;
     private final RotationPolicy.RotationPolicyListener mRotationPolicyListener =
             new RotationPolicy.RotationPolicyListener() {
         @Override
@@ -95,7 +115,7 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
 
         mAccelerometer = (CheckBoxPreference) findPreference(KEY_ACCELEROMETER);
         mAccelerometer.setPersistent(false);
-        if (RotationPolicy.isRotationLockToggleSupported(getActivity())) {
+        if (false/*RotationPolicy.isRotationLockToggleSupported(getActivity())*/) {
             // If rotation lock is supported, then we do not provide this option in
             // Display settings.  However, is still available in Accessibility settings.
             getPreferenceScreen().removePreference(mAccelerometer);
@@ -133,6 +153,15 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
                 Log.e(TAG, Settings.System.NOTIFICATION_LIGHT_PULSE + " not found");
             }
         }
+        mScreenAdaption = (Preference)findPreference(KEY_SCREEN_ADAPTION);
+        mAccelerometerCoordinate = (ListPreference) findPreference(KEY_ACCELEROMETER_COORDINATE);
+        if(mAccelerometerCoordinate != null){
+            mAccelerometerCoordinate.setOnPreferenceChangeListener(this);
+            String value = Settings.System.getString(getContentResolver(),
+                    Settings.System.ACCELEROMETER_COORDINATE);
+            mAccelerometerCoordinate.setValue(value);
+            updateAccelerometerCoordinateSummary(value);
+        }
 
         mDisplayManager = (DisplayManager)getActivity().getSystemService(
                 Context.DISPLAY_SERVICE);
@@ -143,6 +172,105 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
             getPreferenceScreen().removePreference(mWifiDisplayPreference);
             mWifiDisplayPreference = null;
         }
+        mBrightSystem = (CheckBoxPreference)findPreference(KEY_BRIGHT_SYSTEM);
+        mBrightSystemDemo = (CheckBoxPreference)findPreference(KEY_BRIGHT_SYSTEM_DEMO);
+        boolean demoEnabled;
+        if(mBrightSystem != null) {
+            try{
+                demoEnabled = (Settings.System.getInt(resolver,
+                        Settings.System.BRIGHT_SYSTEM_MODE)&0x01) > 0;
+                mBrightSystem.setChecked(demoEnabled);
+                mBrightSystem.setOnPreferenceChangeListener(this);
+                if (mBrightSystemDemo != null && demoEnabled) {
+                    try {
+                        mBrightSystemDemo.setChecked((Settings.System.getInt(resolver,
+                                Settings.System.BRIGHT_SYSTEM_MODE)&0x02)> 0);
+                        mBrightSystemDemo.setOnPreferenceChangeListener(this);
+                    } catch (SettingNotFoundException snfe) {
+                        Log.e(TAG, Settings.System.BRIGHT_SYSTEM_MODE + " not found");
+                    }
+                } else if (mBrightSystemDemo == null) {
+                    getPreferenceScreen().removePreference(mBrightSystemDemo);
+                } else {
+                    mBrightSystemDemo.setEnabled(demoEnabled);
+                }
+            } catch (SettingNotFoundException snfe) {
+                Log.e(TAG, Settings.System.BRIGHT_SYSTEM_MODE + " not found");
+            }
+        } else {
+            getPreferenceScreen().removePreference(mBrightSystem);
+        }
+
+        mBrightnessLight = (CheckBoxPreference)findPreference(KEY_BRIGHTNESS_LIGHT);
+        mBrightnessLightDemo = (CheckBoxPreference)findPreference(KEY_BRIGHTNESS_LIGHT_DEMO);
+        if(mBrightnessLight != null){
+            try{
+                demoEnabled = (Settings.System.getInt(resolver,
+                        Settings.System.BRIGHTNESS_LIGHT_MODE)&0x01)> 0;
+                mBrightnessLight.setChecked(demoEnabled);
+                mBrightnessLight.setOnPreferenceChangeListener(this);
+
+                if (mBrightnessLightDemo != null && demoEnabled) {
+                    try {
+                        mBrightnessLightDemo.setChecked((Settings.System.getInt(resolver,
+                                Settings.System.BRIGHTNESS_LIGHT_MODE)&0x02) > 0);
+                        mBrightnessLightDemo.setOnPreferenceChangeListener(this);
+                    } catch (SettingNotFoundException snfe) {
+                        Log.e(TAG, Settings.System.BRIGHTNESS_LIGHT_MODE + " not found");
+                    }
+                } else if (mBrightnessLightDemo == null) {
+                    getPreferenceScreen().removePreference(mBrightnessLightDemo);
+                } else {
+                    mBrightnessLightDemo.setEnabled(demoEnabled);
+                }
+            } catch (SettingNotFoundException snfe) {
+                Log.e(TAG, Settings.System.BRIGHTNESS_LIGHT_MODE + " not found");
+            }
+        } else {
+            getPreferenceScreen().removePreference(mBrightnessLight);
+        }
+
+        final int sethdmimode = SystemProperties.getInt("ro.sf.showhdmisettings", 0);
+        final boolean isShowHdmiMode = (sethdmimode & 0x03) > 0;
+        final boolean isShow1080p = (sethdmimode & 0x02) > 0;
+        final boolean isShowFullScreen = (sethdmimode & 0x04) > 0;
+        mHdmiOutputModeCategory = (PreferenceCategory) findPreference(KEY_HDMI_OUTPUT_MODE_CATE);
+        mHdmiFullScreen = (CheckBoxPreference)findPreference(KEY_HDMI_FULL_SCREEN);
+        if (isShow1080p) {
+            mHdmiOutputModePreference = (ListPreference) findPreference(KEY_HDMI_OUTPUT_MODE_720P);
+            mHdmiOutputModeCategory.removePreference(mHdmiOutputModePreference);
+            mHdmiOutputModePreference = (ListPreference) findPreference(KEY_HDMI_OUTPUT_MODE);
+        } else {
+            mHdmiOutputModePreference = (ListPreference) findPreference(KEY_HDMI_OUTPUT_MODE);
+            mHdmiOutputModeCategory.removePreference(mHdmiOutputModePreference);
+            mHdmiOutputModePreference = (ListPreference) findPreference(KEY_HDMI_OUTPUT_MODE_720P);
+        }
+
+        if (sethdmimode != 0) {
+            if (isShowHdmiMode) {
+                final int currentHdmiMode = Settings.System.getInt(resolver, Settings.System.HDMI_OUTPUT_MODE, 0);
+                mHdmiOutputModePreference.setValue(String.valueOf(currentHdmiMode));
+                mHdmiOutputModePreference.setOnPreferenceChangeListener(this);
+            } else {
+                mHdmiOutputModeCategory.removePreference(mHdmiOutputModePreference);
+                mHdmiOutputModePreference = null;
+            }
+
+            if (isShowFullScreen) {
+                final boolean isHdmiFullScreen = Settings.System.getInt(resolver,
+                        Settings.System.HDMI_FULL_SCREEN, 0) > 0;
+                mHdmiFullScreen.setChecked(isHdmiFullScreen);
+                mHdmiFullScreen.setOnPreferenceChangeListener(this);
+            } else {
+                mHdmiOutputModeCategory.removePreference(mHdmiFullScreen);
+                mHdmiFullScreen = null;
+            }
+        } else {
+            getPreferenceScreen().removePreference(mHdmiOutputModeCategory);
+            mHdmiOutputModePreference = null;
+            mHdmiOutputModeCategory = null;
+            mHdmiFullScreen = null;
+        }
     }
 
     private void updateTimeoutPreferenceDescription(long currentTimeout) {
@@ -150,7 +278,7 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
         String summary;
         if (currentTimeout < 0) {
             // Unsupported value
-            summary = "";
+            summary = preference.getContext().getString(R.string.never_sleep);
         } else {
             final CharSequence[] entries = preference.getEntries();
             final CharSequence[] values = preference.getEntryValues();
@@ -160,7 +288,7 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
                 int best = 0;
                 for (int i = 0; i < values.length; i++) {
                     long timeout = Long.parseLong(values[i].toString());
-                    if (currentTimeout >= timeout) {
+                    if (currentTimeout == timeout) {
                         best = i;
                     }
                 }
@@ -285,6 +413,9 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
         readFontSizePreference(mFontSizePref);
         updateScreenSaverSummary();
         updateWifiDisplaySummary();
+        if (mAccelerometerCoordinate != null) {
+            updateAccelerometerCoordinateSummary(mAccelerometerCoordinate.getValue());
+        }
     }
 
     private void updateScreenSaverSummary() {
@@ -317,6 +448,17 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
         mAccelerometer.setChecked(!RotationPolicy.isRotationLocked(getActivity()));
     }
 
+    private void updateAccelerometerCoordinateSummary(Object value){
+        CharSequence[] summaries = getResources().getTextArray(R.array.accelerometer_summaries);
+        CharSequence[] values = mAccelerometerCoordinate.getEntryValues();
+        for (int i=0; i<values.length; i++) {
+            if (values[i].equals(value)) {
+                mAccelerometerCoordinate.setSummary(summaries[i]);
+                break;
+            }
+        }
+    }
+
     public void writeFontSizePreference(Object objValue) {
         try {
             mCurConfig.fontScale = Float.parseFloat(objValue.toString());
@@ -328,14 +470,51 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
 
     @Override
     public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
-        if (preference == mAccelerometer) {
-            RotationPolicy.setRotationLockForAccessibility(
-                    getActivity(), !mAccelerometer.isChecked());
-        } else if (preference == mNotificationPulse) {
-            boolean value = mNotificationPulse.isChecked();
-            Settings.System.putInt(getContentResolver(), Settings.System.NOTIFICATION_LIGHT_PULSE,
-                    value ? 1 : 0);
-            return true;
+        boolean value;
+        int value2;
+        try {
+            if (preference == mAccelerometer) {
+                RotationPolicy.setRotationLockForAccessibility(
+                        getActivity(), !mAccelerometer.isChecked());
+            } else if (preference == mNotificationPulse) {
+                value = mNotificationPulse.isChecked();
+                Settings.System.putInt(getContentResolver(), Settings.System.NOTIFICATION_LIGHT_PULSE,
+                        value ? 1 : 0);
+                return true;
+            } else if (preference == mBrightSystem) {
+                value = mBrightSystem.isChecked();
+                value2 = Settings.System.getInt(getContentResolver(),
+                        Settings.System.BRIGHT_SYSTEM_MODE);
+                Settings.System.putInt(getContentResolver(),Settings.System.BRIGHT_SYSTEM_MODE,
+                        value ? value2|0x01 : value2&0x02);
+                mBrightSystemDemo.setEnabled(value);
+            } else if (preference == mBrightSystemDemo) {
+                value = mBrightSystemDemo.isChecked();
+                value2 = Settings.System.getInt(getContentResolver(),
+                        Settings.System.BRIGHT_SYSTEM_MODE);
+                Settings.System.putInt(getContentResolver(),Settings.System.BRIGHT_SYSTEM_MODE,
+                        value ? value2|0x02 : value2&0x01);
+            } else if (preference == mBrightnessLight) {
+                value = mBrightnessLight.isChecked();
+                value2 = Settings.System.getInt(getContentResolver(),
+                        Settings.System.BRIGHTNESS_LIGHT_MODE);
+                Settings.System.putInt(getContentResolver(),Settings.System.BRIGHTNESS_LIGHT_MODE,
+                        value ? value2|0x01 : value2&0x02);
+                mBrightnessLightDemo.setEnabled(value);
+            } else if (preference == mBrightnessLightDemo) {
+                value = mBrightnessLightDemo.isChecked();
+                value2 = Settings.System.getInt(getContentResolver(),
+                        Settings.System.BRIGHTNESS_LIGHT_MODE);
+                Settings.System.putInt(getContentResolver(),Settings.System.BRIGHTNESS_LIGHT_MODE,
+                        value ? value2|0x02 : value2&0x01);
+            } else if (preference == mHdmiFullScreen) {
+                value = mHdmiFullScreen.isChecked();
+                Settings.System.putInt(getContentResolver(),Settings.System.HDMI_FULL_SCREEN,
+                        value ? 0x01 : 0);
+            }
+        } catch (SettingNotFoundException e) {
+            Log.e(TAG, Settings.System.BRIGHTNESS_LIGHT_MODE+ " or "+
+                    Settings.System.BRIGHT_SYSTEM_MODE + " not found");
         }
         return super.onPreferenceTreeClick(preferenceScreen, preference);
     }
@@ -354,6 +533,24 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
         if (KEY_FONT_SIZE.equals(key)) {
             writeFontSizePreference(objValue);
         }
+        if (KEY_ACCELEROMETER_COORDINATE.equals(key)) {
+            String value = String.valueOf(objValue);
+            try {
+                Settings.System.putString(getContentResolver(),
+                        Settings.System.ACCELEROMETER_COORDINATE, value);
+                updateAccelerometerCoordinateSummary(objValue);
+            }catch (NumberFormatException e) {
+                Log.e(TAG, "could not persist key accelerometer coordinate setting", e);
+            }
+        }
+        if (KEY_HDMI_OUTPUT_MODE.equals(key) || KEY_HDMI_OUTPUT_MODE_720P.equals(key)) {
+            int value = Integer.parseInt((String) objValue);
+            try {
+                Settings.System.putInt(getContentResolver(), Settings.System.HDMI_OUTPUT_MODE, value);
+            } catch (NumberFormatException e) {
+                Log.e(TAG, "could not persist hdmi output mode setting", e);
+            }
+        }
 
         return true;
     }
diff --git a/src/com/android/settings/DreamSettings.java b/src/com/android/settings/DreamSettings.java
index 32328d9..3411713 100644
--- a/src/com/android/settings/DreamSettings.java
+++ b/src/com/android/settings/DreamSettings.java
@@ -188,22 +188,22 @@ public class DreamSettings extends SettingsPreferenceFragment {
 
     private Dialog createWhenToDreamDialog() {
         final CharSequence[] items = {
-                mContext.getString(R.string.screensaver_settings_summary_dock),
+                //mContext.getString(R.string.screensaver_settings_summary_dock),
                 mContext.getString(R.string.screensaver_settings_summary_sleep),
-                mContext.getString(R.string.screensaver_settings_summary_either_short)
+                //mContext.getString(R.string.screensaver_settings_summary_either_short)
         };
 
-        int initialSelection = mBackend.isActivatedOnDock() && mBackend.isActivatedOnSleep() ? 2
+        int initialSelection = 0/*mBackend.isActivatedOnDock() && mBackend.isActivatedOnSleep() ? 2
                 : mBackend.isActivatedOnDock() ? 0
                 : mBackend.isActivatedOnSleep() ? 1
-                : -1;
+                : -1*/;
 
         return new AlertDialog.Builder(mContext)
                 .setTitle(R.string.screensaver_settings_when_to_dream)
                 .setSingleChoiceItems(items, initialSelection, new DialogInterface.OnClickListener() {
                     public void onClick(DialogInterface dialog, int item) {
-                        mBackend.setActivatedOnDock(item == 0 || item == 2);
-                        mBackend.setActivatedOnSleep(item == 1 || item == 2);
+                        mBackend.setActivatedOnDock(item == 0 || item == 2 || item == 1);
+                        mBackend.setActivatedOnSleep(item == 1 || item == 2 || item == 0);
                     }
                 })
                 .create();
diff --git a/src/com/android/settings/LocationSettings.java b/src/com/android/settings/LocationSettings.java
index cfbbe26..ede70e5 100644
--- a/src/com/android/settings/LocationSettings.java
+++ b/src/com/android/settings/LocationSettings.java
@@ -92,6 +92,12 @@ public class LocationSettings extends SettingsPreferenceFragment
         mAssistedGps = (CheckBoxPreference) root.findPreference(KEY_ASSISTED_GPS);
 
         mLocationAccess.setOnPreferenceChangeListener(this);
+		
+		//remove gps by hua 
+        if(true){
+            getPreferenceScreen().removePreference(mGps);
+        }
+
         return root;
     }
 
diff --git a/src/com/android/settings/PrivacySettings.java b/src/com/android/settings/PrivacySettings.java
index d936f46..0e3f58c 100644
--- a/src/com/android/settings/PrivacySettings.java
+++ b/src/com/android/settings/PrivacySettings.java
@@ -16,6 +16,10 @@
 
 package com.android.settings;
 
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.backup.IBackupManager;
@@ -26,6 +30,7 @@ import android.content.Intent;
 import android.os.Bundle;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.PowerManager;
 import android.preference.CheckBoxPreference;
 import android.preference.Preference;
 import android.preference.PreferenceScreen;
@@ -43,9 +48,11 @@ public class PrivacySettings extends SettingsPreferenceFragment implements
     private static final String BACKUP_DATA = "backup_data";
     private static final String AUTO_RESTORE = "auto_restore";
     private static final String CONFIGURE_ACCOUNT = "configure_account";
+	private static final String SYSTEM_RECOVERY = "system_recovery";
     private IBackupManager mBackupManager;
     private CheckBoxPreference mBackup;
     private CheckBoxPreference mAutoRestore;
+	private PreferenceScreen mRecovery;
     private Dialog mConfirmDialog;
     private PreferenceScreen mConfigure;
 
@@ -64,6 +71,7 @@ public class PrivacySettings extends SettingsPreferenceFragment implements
         mBackup = (CheckBoxPreference) screen.findPreference(BACKUP_DATA);
         mAutoRestore = (CheckBoxPreference) screen.findPreference(AUTO_RESTORE);
         mConfigure = (PreferenceScreen) screen.findPreference(CONFIGURE_ACCOUNT);
+		mRecovery = (PreferenceScreen) screen.findPreference(SYSTEM_RECOVERY);
 
         // Vendor specific
         if (getActivity().getPackageManager().
@@ -107,6 +115,8 @@ public class PrivacySettings extends SettingsPreferenceFragment implements
             } catch (RemoteException e) {
                 mAutoRestore.setChecked(!curState);
             }
+        }else if(preference == mRecovery){
+            showRecoveryDialog();
         }
         return super.onPreferenceTreeClick(preferenceScreen, preference);
     }
@@ -125,6 +135,52 @@ public class PrivacySettings extends SettingsPreferenceFragment implements
                 .show();
     }
 
+	private void showRecoveryDialog(){
+		mConfirmDialog = new AlertDialog.Builder(getActivity())
+			.setTitle(R.string.system_recovery_title)
+			.setMessage(getActivity().getString(R.string.system_recovery_dialog_massage))
+			.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
+			     @Override
+				 public void onClick(DialogInterface dialog, int which){
+				 
+				 	  Intent intent = new Intent();
+					  intent.setAction("android.need.alarm.reset");
+					  getActivity().sendBroadcast(intent);
+
+					  try
+					  {
+					  	Thread.sleep(2);
+					  }
+					  catch(Exception e)
+					  {}
+
+					  rebootRecovery();
+                  }
+		     })
+			.setNegativeButton(android.R.string.cancel,this)
+			.show();
+
+
+	}
+	private void rebootRecovery(){
+		 File RECOVERY_DIR = new File("/cache/recovery");    
+		 File COMMAND_FILE = new File(RECOVERY_DIR, "command");    
+		 String SHOW_TEXT="--show_text";
+		 RECOVERY_DIR.mkdirs();  // In case we need it         
+		 COMMAND_FILE.delete();  // In case it's not writable       		
+		 try {		    
+		 	FileWriter command = new FileWriter(COMMAND_FILE);			
+		    command.write(SHOW_TEXT);            
+			command.write("\n");            
+			command.close();		
+		 } catch (IOException e) {			
+		  // TODO Auto-generated catch block			
+		  e.printStackTrace();		
+		  }       		 
+		 PowerManager pm = (PowerManager) getActivity().getSystemService(Context.POWER_SERVICE);	     
+		 pm.reboot("recovery");    
+
+	}
     /*
      * Creates toggles for each available location provider
      */
diff --git a/src/com/android/settings/SecuritySettings.java b/src/com/android/settings/SecuritySettings.java
index 59cd110..ec4dea3 100644
--- a/src/com/android/settings/SecuritySettings.java
+++ b/src/com/android/settings/SecuritySettings.java
@@ -167,7 +167,7 @@ public class SecuritySettings extends SettingsPreferenceFragment
             }
         }
 
-        if (mIsPrimary) {
+        if (false/*mIsPrimary*/) {
             switch (dpm.getStorageEncryptionStatus()) {
             case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
                 // The device is currently encrypted.
diff --git a/src/com/android/settings/Settings.java b/src/com/android/settings/Settings.java
index a5e2005..fb0bcee 100644
--- a/src/com/android/settings/Settings.java
+++ b/src/com/android/settings/Settings.java
@@ -416,9 +416,12 @@ public class Settings extends PreferenceActivity
     }
 
     private void updateHeaderList(List<Header> target) {
-        final boolean showDev = mDevelopmentPreferences.getBoolean(
+        final boolean showDev = true;
+        /*
+        mDevelopmentPreferences.getBoolean(
                 DevelopmentSettings.PREF_SHOW,
                 android.os.Build.TYPE.equals("eng"));
+        */
         int i = 0;
 
         mHeaderIndexMap.clear();
@@ -804,6 +807,7 @@ public class Settings extends PreferenceActivity
     public static class WirelessSettingsActivity extends Settings { /* empty */ }
     public static class TetherSettingsActivity extends Settings { /* empty */ }
     public static class VpnSettingsActivity extends Settings { /* empty */ }
+    public static class EthernetSettingsActivity extends Settings { /* empty */ }
     public static class DateTimeSettingsActivity extends Settings { /* empty */ }
     public static class StorageSettingsActivity extends Settings { /* empty */ }
     public static class WifiSettingsActivity extends Settings { /* empty */ }
diff --git a/src/com/android/settings/TetherSettings.java b/src/com/android/settings/TetherSettings.java
index df44e91..02616d6 100644
--- a/src/com/android/settings/TetherSettings.java
+++ b/src/com/android/settings/TetherSettings.java
@@ -385,6 +385,9 @@ public class TetherSettings extends SettingsPreferenceFragment
         }
 
         BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
+        if (adapter == null) {
+        	return;
+        }
         int btState = adapter.getState();
         if (btState == BluetoothAdapter.STATE_TURNING_OFF) {
             mBluetoothTether.setEnabled(false);
diff --git a/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java b/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java
index 1599ec7..6f74df4 100644
--- a/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java
+++ b/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java
@@ -35,6 +35,7 @@ import android.os.storage.StorageVolume;
 import android.preference.Preference;
 import android.preference.PreferenceCategory;
 import android.text.format.Formatter;
+import android.util.Log;
 
 import com.android.settings.R;
 import com.android.settings.deviceinfo.StorageMeasurement.MeasurementDetails;
@@ -47,6 +48,7 @@ import java.util.List;
 
 public class StorageVolumePreferenceCategory extends PreferenceCategory {
     public static final String KEY_CACHE = "cache";
+	private static final String TAG = "StorageVolumePreferenceCategory";
 
     private static final int ORDER_USAGE_BAR = -2;
     private static final int ORDER_STORAGE_LOW = -1;
@@ -192,18 +194,18 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
                 }
             }
         }
-
+		
+        // Only allow formatting of primary physical storage
+        // TODO: enable for non-primary volumes once MTP is fixed
+        final boolean allowFormat = mVolume != null ? mVolume.isPrimary() : false;
         final boolean isRemovable = mVolume != null ? mVolume.isRemovable() : false;
-        if (isRemovable) {
+        if (isRemovable||allowFormat) {
             mMountTogglePreference = new Preference(context);
             mMountTogglePreference.setTitle(R.string.sd_eject);
             mMountTogglePreference.setSummary(R.string.sd_eject_summary);
             addPreference(mMountTogglePreference);
         }
 
-        // Only allow formatting of primary physical storage
-        // TODO: enable for non-primary volumes once MTP is fixed
-        final boolean allowFormat = mVolume != null ? mVolume.isPrimary() : false;
         if (allowFormat) {
             mFormatPreference = new Preference(context);
             mFormatPreference.setTitle(R.string.sd_format);
@@ -234,7 +236,14 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
     private void updatePreferencesFromState() {
         // Only update for physical volumes
         if (mVolume == null) return;
+        if (mMountTogglePreference==null) return;
 
+        addPreference(mUsageBarPreference);
+	    addPreference(mItemTotal);
+		addPreference(mItemAvailable);
+		if (mFormatPreference != null) {
+        	addPreference(mFormatPreference);
+        }
         mMountTogglePreference.setEnabled(true);
 
         final String state = mStorageManager.getVolumeState(mVolume.getPath());
@@ -248,14 +257,22 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
             mItemAvailable.setSummary(R.string.memory_available);
         }
 
+        if ((mVolume == null || !mVolume.isRemovable())
+                && !Environment.MEDIA_UNMOUNTED.equals(state)) {
+            // This device has built-in storage that is not removable.
+            // There is no reason for the user to unmount it.
+            removePreference(mMountTogglePreference);
+        }
+
         if (Environment.MEDIA_MOUNTED.equals(state)
                 || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
-            mMountTogglePreference.setEnabled(true);
+           	mMountTogglePreference.setEnabled(true);
             mMountTogglePreference.setTitle(mResources.getString(R.string.sd_eject));
             mMountTogglePreference.setSummary(mResources.getString(R.string.sd_eject_summary));
         } else {
             if (Environment.MEDIA_UNMOUNTED.equals(state) || Environment.MEDIA_NOFS.equals(state)
                     || Environment.MEDIA_UNMOUNTABLE.equals(state)) {
+                addPreference(mMountTogglePreference);
                 mMountTogglePreference.setEnabled(true);
                 mMountTogglePreference.setTitle(mResources.getString(R.string.sd_mount));
                 mMountTogglePreference.setSummary(mResources.getString(R.string.sd_mount_summary));
@@ -309,20 +326,26 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
 
     private static long totalValues(HashMap<String, Long> map, String... keys) {
         long total = 0;
+        Long value = null;
+        if(map==null) return 0;
         for (String key : keys) {
-            total += map.get(key);
+        	value = map.get(key);
+        	if(value==null) continue;
+            total += value;
         }
         return total;
     }
 
     public void updateDetails(MeasurementDetails details) {
         final boolean showDetails = mVolume == null || mVolume.isPrimary();
-        if (!showDetails) return;
+        
 
         // Count caches as available space, since system manages them
         mItemTotal.setSummary(formatSize(details.totalSize));
         mItemAvailable.setSummary(formatSize(details.availSize));
 
+		if (!showDetails) return;
+		
         mUsageBarPreference.clear();
 
         updatePreference(mItemApps, details.appsSize);
diff --git a/src/com/android/settings/deviceinfo/UsbSettings.java b/src/com/android/settings/deviceinfo/UsbSettings.java
index b8290fc..06f784f 100644
--- a/src/com/android/settings/deviceinfo/UsbSettings.java
+++ b/src/com/android/settings/deviceinfo/UsbSettings.java
@@ -45,11 +45,13 @@ public class UsbSettings extends SettingsPreferenceFragment {
 
     private static final String KEY_MTP = "usb_mtp";
     private static final String KEY_PTP = "usb_ptp";
+    private static final String KEY_USB_STORAGE = "usb_large_storage";
 
     private UsbManager mUsbManager;
     private CheckBoxPreference mMtp;
     private CheckBoxPreference mPtp;
     private boolean mUsbAccessoryMode;
+    private CheckBoxPreference mUsbStorage;
 
     private final BroadcastReceiver mStateReceiver = new BroadcastReceiver() {
         public void onReceive(Context content, Intent intent) {
@@ -72,6 +74,7 @@ public class UsbSettings extends SettingsPreferenceFragment {
 
         mMtp = (CheckBoxPreference)root.findPreference(KEY_MTP);
         mPtp = (CheckBoxPreference)root.findPreference(KEY_PTP);
+        mUsbStorage = (CheckBoxPreference)root.findPreference(KEY_USB_STORAGE);
 
         return root;
     }
@@ -105,12 +108,15 @@ public class UsbSettings extends SettingsPreferenceFragment {
         if (UsbManager.USB_FUNCTION_MTP.equals(function)) {
             mMtp.setChecked(true);
             mPtp.setChecked(false);
+            mUsbStorage.setChecked(false);
         } else if (UsbManager.USB_FUNCTION_PTP.equals(function)) {
             mMtp.setChecked(false);
             mPtp.setChecked(true);
-        } else  {
+            mUsbStorage.setChecked(false);
+        } else {
             mMtp.setChecked(false);
             mPtp.setChecked(false);
+		    mUsbStorage.setChecked(true);
         }
 
         if (!mUsbAccessoryMode) {
@@ -149,6 +155,9 @@ public class UsbSettings extends SettingsPreferenceFragment {
         } else if (preference == mPtp) {
             mUsbManager.setCurrentFunction(UsbManager.USB_FUNCTION_PTP, true);
             updateToggles(UsbManager.USB_FUNCTION_PTP);
+        } else if (preference == mUsbStorage){
+            mUsbManager.setCurrentFunction(UsbManager.USB_FUNCTION_MASS_STORAGE, true);
+        	updateToggles(UsbManager.USB_FUNCTION_MASS_STORAGE);
         }
         return true;
     }
diff --git a/src/com/android/settings/widget/SettingsAppWidgetProvider.java b/src/com/android/settings/widget/SettingsAppWidgetProvider.java
index a722818..153b46b 100644
--- a/src/com/android/settings/widget/SettingsAppWidgetProvider.java
+++ b/src/com/android/settings/widget/SettingsAppWidgetProvider.java
@@ -39,6 +39,7 @@ import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.provider.Settings;
 import android.util.Log;
+import android.view.View;
 import android.widget.RemoteViews;
 import com.android.settings.R;
 import com.android.settings.bluetooth.LocalBluetoothAdapter;
@@ -667,6 +668,8 @@ public class SettingsAppWidgetProvider extends AppWidgetProvider {
         views.setOnClickPendingIntent(R.id.btn_bluetooth,
                 getLaunchPendingIntent(context,
                         BUTTON_BLUETOOTH));
+        views.setViewVisibility(R.id.btn_gps, View.GONE);
+				//views.setViewVisibility(R.id.btn_bluetooth, View.GONE);
 
         updateButtons(views, context);
         return views;